#!/usr/bin/python

import subprocess
import sys
import json

stuff = open(sys.argv[1], 'r')
things = json.load(stuff)
STOP = None

# Check free space on root partition
for host in things['names']:
	if STOP == True:
		break
	args = ["ssh",host,"df"]
	print 'Connecting to..' + host + "..checking free space"
	ssh = subprocess.Popen(' '.join(args),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	result = ssh.stdout.readlines()
	for a in result:
		a = a.strip().split()
		if a[-1] == '/':
			if int(a[4][:2]) >= 85:
				print "Root partition on",host,"is at least 85% capacity, please clear space appropriately and retry.."
				STOP = True
			else:
				print "Root partition on",host,"is at least 15% free, proceeding.."

# Should CM check free space? Yes.  Should the run be aborted if there is not enough on one of the hosts?  Yes.
if STOP == True:
	sys.exit("One or more hosts are at least 85% capacity, deployment is exiting now.")

# Check if resolvconf is running
for host in things['names']:
	args = ["ssh", host, "service", "resolvconf", "status"]
	ssh = subprocess.Popen(' '.join(args),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	result = ssh.stdout.readlines()
	error = ssh.stderr.readlines()
	for a in result:
		a = a.strip().split()
		if a[1] == 'start/running':
			print "resolvconf is running on",host
		else:
			print "resolvconf is not running on",host,"..Attempting restart.."
			args = ["ssh", host, "service", "resolvconf", "force-reload"]
			ssh = subprocess.Popen(' '.join(args),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
			result = ssh.stdout.readlines()
			error = ssh.stderr.readlines()
			if error != []:
				print ''.join(error)
			else:
				for a in result:
					a = a.strip().split()
					if a[1] == 'start/running':
						print "resolvconf has been restarted and is now running."
				print ''.join(result)
# Should CM check if a service is running?  Yes.  Should it try to start/restart it if its not?  Yes.
# Should it break the CM run?  For now, I will say no.  Onwards.

# Install packages
for host in things['names']:
	for package in things['packages']:
		package = 'apt-get -y install ' + package
		args = ["ssh", host, package]
		print 'Connecting to..' + host + '..installing..' + package
		ssh = subprocess.Popen(' '.join(args),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
		result = ssh.stdout.readlines()
		error = ssh.stderr.readlines()
		if result == []:
		    print ''.join(error)
		else:
		    print ''.join(result)
		    print ''.join(error)

# Install content
if things['content']:
	for host in things['names']:
		for file in things['content']:
			host = host + ":"+file[1]
			args = "rsync -c",str(file[0]),str(host)
			rsync = subprocess.Popen(' '.join(args),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
			error = rsync.stderr.readlines()
			if error != []:			
				print ''.join(error)
			else:
				print 'Content',file[0],'has been copied to',host

# Opens ports
if things['ports']:
	for host in things['names']:
			for port in things['ports']:
				port = str(port)
				args = ["ssh", host, "iptables -I INPUT -p tcp --dport "+ port +" -j ACCEPT"]
				ssh = subprocess.Popen(' '.join(args),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
				result = ssh.stdout.readlines()
				error = ssh.stderr.readlines()
				if error != []:			
					print ''.join(error)
				else:
					print 'Port: '+ port + " has been opened on " + host
